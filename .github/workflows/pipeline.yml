name: SDyPP-grupo4-tp-integrador

env:
  ACTIONS_STEP_DEBUG: true

on:
  push:
    branches:
      - main
jobs:
  deploy-infra:
    if: "!contains(github.event.head_commit.message, 'delete') && !contains(github.event.head_commit.message, 'pause')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Check and Create GCS Bucket
        env:
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          gcloud config set project $PROJECT_ID
          BUCKET_URI="gs://${BUCKET_NAME}/"
          if gsutil ls -p $PROJECT_ID | grep -q $BUCKET_URI; then
            echo "Bucket $BUCKET_NAME already exists."
          else
            echo "Creating bucket $BUCKET_NAME..."
            gsutil mb -p $PROJECT_ID $BUCKET_URI
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1

      - name: Terraform Initialize
        run: |
          terraform init --reconfigure \
            -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
            -backend-config="prefix=terraform/state"
        working-directory: TP-Integrador/terraform

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: TP-Integrador/terraform

      - name: Terraform Apply
        run: terraform apply -lock=false -auto-approve tfplan
        working-directory: TP-Integrador/terraform

      - name: GCP kubectl plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
            version: '>= 363.0.0'
            install_components: 'kubectl'

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-d" --project ${{ secrets.PROJECT_ID }}

      - name: Apply RBAC Configuration
        run: kubectl apply -f TP-Integrador/manifests/cluster-role-binding.yaml

  install-argo:
    if: "contains(github.event.head_commit.message, '[install-argo]')"
    needs: deploy-infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: GCP authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: GCP kubectl plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
            version: '>= 363.0.0'
            install_components: 'kubectl'

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-d" --project ${{ secrets.PROJECT_ID }}
      
      # - name: Apply RBAC Configuration
      #   run: kubectl apply -f TP-Integrador/manifests/role-binding.yaml

      # - name: Apply RBAC Configuration
      #   run: gcloud projects add-iam-policy-binding ${{ secrets.PROJECT_ID }} \
      #     --member="serviceAccount:${{ secrets.KUBERNETES_SERVICE_ACCOUNT_EMAIL }}" \
      #     --role="roles/container.clusterAdmin"

      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd || echo "Namespace already exists"
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

  install-ingress-nginx:
    if: "contains(github.event.head_commit.message, '[install-ingress-nginx]')"
    needs: deploy-infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: GCP authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: GCP kubectl plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
            version: '>= 363.0.0'
            install_components: 'kubectl'

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-d" --project ${{ secrets.PROJECT_ID }}

      - name: Create ingress-nginx namespace
        run: kubectl create namespace ingress-nginx || echo "Namespace already exists"

      - name: Reserve Static IP for Ingress
        run: |
          if ! gcloud compute addresses describe ingress-ip --region us-east1 > /dev/null 2>&1; then
            echo "Creating static IP address 'ingress-ip'..."
            gcloud compute addresses create ingress-ip --region us-east1
          else
            echo "Static IP address 'ingress-ip' already exists."
          fi
          INGRESS_IP=$(gcloud compute addresses describe ingress-ip --region us-east1 --format='get(address)')

      - name: Install ingress-nginx
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          if helm ls -n ingress-nginx | grep ingress-nginx; then
          helm upgrade --install -n ingress-nginx nginx ingress-nginx/ingress-nginx \
            --values TP-Integrador/ingress-nginx/values.yaml \
            --set controller.service.loadBalancerIP=$INGRESS_IP
          else
            helm install nginx ingress-nginx/ingress-nginx -n ingress-nginx --create-namespace \
            --set controller.service.loadBalancerIP=$INGRESS_IP
          fi

        
  # install-traefik:
  #  if: "contains(github.event.head_commit.message, '[install-traefik]')"
  #   needs: deploy-infra
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4.1.6

  #     - name: GCP authentication
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

  #     - name: GCP kubectl plugin
  #       uses: google-github-actions/setup-gcloud@v2
  #       with:
  #           version: '>= 363.0.0'
  #           install_components: 'kubectl'

  #     - name: Get Kubernetes Credentials
  #       run: |
  #         gcloud container clusters get-credentials primary --zone "us-east1-d" --project ${{ secrets.PROJECT_ID }}

  #     - name: Install Helm
  #       run: |
  #         curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

  #     - name: Add Traefik Helm Repository
  #       run: |
  #         helm repo add traefik https://traefik.github.io/charts
  #         helm repo update

  #     - name: Deploy Traefik
  #       run: |
  #         helm upgrade --install traefik traefik/traefik \
  #           --namespace traefik \
  #           --create-namespace \
  #           -f TP-Integrador/traefik/traefik-values.yaml

  #     - name: Reserve Static IP for Traefik
  #       run: |
  #         if ! gcloud compute addresses describe traefik-ip --region us-east1 > /dev/null 2>&1; then
  #           echo "Creating static IP address 'traefik-ip'..."
  #           gcloud compute addresses create traefik-ip --region us-east1
  #         else
  #           echo "Static IP address 'traefik-ip' already exists."
  #         fi
  #         TRAEFIK_IP=$(gcloud compute addresses describe traefik-ip --region us-east1 --format='get(address)')
  #         kubectl patch svc traefik -n traefik -p "{\"spec\": {\"loadBalancerIP\": \"$TRAEFIK_IP\"}}"

  #     - name: Save Traefik IP for future usage
  #       run: |
  #         TRAEFIK_IP=$(gcloud compute addresses describe traefik-ip --region us-east1 --format='get(address)')
  #         echo "TRAEFIK_IP=$TRAEFIK_IP" >> $GITHUB_ENV

  # install-ngrok:
  #   if: "contains(github.event.head_commit.message, '[install-ngrok]')"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4.1.6

  #     - name: GCP authentication
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

  #     - name: GCP kubectl plugin
  #       uses: google-github-actions/setup-gcloud@v2
  #       with:
  #           version: '>= 363.0.0'
  #           install_components: 'kubectl'

  #     - name: Get Kubernetes Credentials
  #       run: |
  #         gcloud container clusters get-credentials primary --zone "us-east1-d" --project ${{ secrets.PROJECT_ID }}

  #     - name: Create ngrok namespace
  #       run: kubectl create namespace ngrok || echo "Namespace already exists"

  #     - name: Create ngrok secret
  #       run: |
  #         kubectl delete secret ngrok-secret -n ngrok || echo "Secret does not exist"
  #         kubectl create secret generic ngrok-secret \
  #           --from-literal=ngrok-authtoken="${{ secrets.NGROK_AUTH_TOKEN }}" \
  #           --from-literal=ngrok-config="$(cat <<EOF
  #         authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}
  #         version: "2"
  #         tunnels:
  #           coordinator:
  #             addr: coordinator.apps.svc.cluster.local:5000
  #             proto: http
  #           keepalive:
  #             addr: keepalive.apps.svc.cluster.local:5001
  #             proto: http
  #           rabbit:
  #             addr: rabbitmq.services.svc.cluster.local:5672
  #             proto: tcp
  #         EOF
  #         )" \
  #           --namespace=ngrok


        # - name: Install ngrok
        #   run: curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok

        # - name: Start ngrok tunnels
        #   run: |
        #     ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        #     nohup ngrok http 5000 &
        #     nohup ngrok tcp 5672 &

        # - name: Wait for ngrok
        #   run: sleep 10

        # - name: Get ngrok public URLs
        #   run: |
        #     curl -s http://localhost:4040/api/tunnels > tunnels.json
        #     echo "Coordinador: $(jq -r '.tunnels[] | select(.name=="command_line").public_url' tunnels.json)"
        #     echo "RabbitMQ: $(jq -r '.tunnels[] | select(.name=="tcp").public_url' tunnels.json)"

  deploy-services-and-apps:
    # needs: [deploy-infra, install-traefik, install-argo]
    needs: [deploy-infra, install-ingress-nginx, install-argo]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-d" --project ${{ secrets.PROJECT_ID }}

      - name: Install Rabbitmq Cluster CRD
        run: kubectl apply -f "https://github.com/rabbitmq/cluster-operator/releases/latest/download/cluster-operator.yml"

      - name: Create namespaces
        run: |
          kubectl create namespace services || echo "Namespace already exists"
          kubectl create namespace apps || echo "Namespace already exists"

      - name: Create ConfigMap from keepalive
        run: |
          INGRESS_IP=$(gcloud compute addresses describe ingress-ip --region us-east1 --format='get(address)')
          kubectl create configmap keepalive-config \
          --from-literal=RABBITMQ_HOST=$INGRESS_IP \
          --from-literal=RABBITMQ_PORT=5672 \
          --from-literal=RABBITMQ_USER=user \
          --from-literal=RABBITMQ_PASSWORD=password \
          --from-literal=COORDINATOR_HOST=$INGRESS_IP \
          --from-literal=COORDINATOR_PORT=5000 \
          --from-literal=KEEPALIVE_HOST=$INGRESS_IP \
          --from-literal=KEEPALIVE_PORT=5001 \
          --from-literal=PROJECT_ID=${{ secrets.PROJECT_ID }} \
          --from-literal=CREDENTIALS_PATH=./credentials.json \
          -n apps --dry-run=client -o yaml | kubectl apply -f -

        # kubectl apply -f TP-Integrador/manifests/apps/keepalive/keepalive-config.yaml
        # kubectl patch configmap keepalive-config -n apps --type merge -p \
        #   "{\"data\": {\"RABBITMQ_HOST\": \"$INGRESS_IP\", \"COORDINATOR_HOST\": \"$INGRESS_IP\", \"KEEPALIVE_HOST\": \"$INGRESS_IP\", \"PROJECT_ID\": \"${{ secrets.PROJECT_ID }}\"}}"

      - name: Deploy ArgoCD Applications
        run: |
          kubectl apply -f TP-Integrador/manifests/argocd-applications.yaml

  config-rabbit:
    if: contains(github.event.head_commit.message, '[config-rabbit]')
    runs-on: ubuntu-latest
    steps:     
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-d" --project ${{ secrets.PROJECT_ID }}

      - name: Create RabbitMQ Users
        run: |
          RABBITMQ_POD=$(kubectl get pods -n services -l app.kubernetes.io/name=rabbitmq -o jsonpath='{.items[0].metadata.name}' | tr -d '\n')
          kubectl exec -n services $RABBITMQ_POD -- rabbitmqctl add_user user password
          kubectl exec -n services $RABBITMQ_POD -- rabbitmqctl set_user_tags user user
          kubectl exec -n services $RABBITMQ_POD -- rabbitmqctl set_permissions -p / user ".*" ".*" ".*"
          kubectl exec -n services $RABBITMQ_POD -- rabbitmqctl add_user admin admin
          kubectl exec -n services $RABBITMQ_POD -- rabbitmqctl set_user_tags admin administrator
          kubectl exec -n services $RABBITMQ_POD -- rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"

  deploy-worker-pool:
    if: contains(github.event.head_commit.message, '[deploy-worker-pool]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-d" --project ${{ secrets.PROJECT_ID }}

      - name: Deploy Worker Pool
        run: |
          INGRESS_IP=$(gcloud compute addresses describe ingress-ip --region us-east1 --format='get(address)')
          KEEP_ALIVE_SERVER_PORT=$(kubectl get configmap keepalive-config -n apps -o jsonpath='{.data.KEEPALIVE_PORT}')
          COORDINATOR_PORT=$(kubectl get configmap keepalive-config -n apps -o jsonpath='{.data.COORDINATOR_PORT}')
          POOL_RABBITMQ_USER=$(kubectl get configmap keepalive-config -n apps -o jsonpath='{.data.RABBITMQ_USER}')
          POOL_RABBITMQ_PASSWORD=$(kubectl get configmap keepalive-config -n apps -o jsonpath='{.data.RABBITMQ_PASSWORD}')
          CONSUME_RABBITMQ_PORT=$(kubectl get configmap keepalive-config -n apps -o jsonpath='{.data.RABBITMQ_PORT}')
          CONSUME_RABBITMQ_USER=$(kubectl get configmap keepalive-config -n apps -o jsonpath='{.data.RABBITMQ_USER}')
          CONSUME_RABBITMQ_PASSWORD=$(kubectl get configmap keepalive-config -n apps -o jsonpath='{.data.RABBITMQ_PASSWORD}')
          gcloud compute instances create worker-pool-manager \
          --image=worker-pool \
          --zone=us-central1-a \
          --metadata=startup-script="#!/bin/bash
          sudo bash -c 'cat <<EOF > /home/packer/SDyPP-2024-grupo-4/TP-Integrador/docker-compose-worker-pool/.env
          POOL_RABBITMQ_HOST=rabbitmq
          POOL_RABBITMQ_PORT=5672
          POOL_RABBITMQ_USER=${POOL_RABBITMQ_USER}
          POOL_RABBITMQ_PASSWORD=${POOL_RABBITMQ_PASSWORD}
          CONSUME_RABBITMQ_HOST=${INGRESS_IP}
          CONSUME_RABBITMQ_PORT=${CONSUME_RABBITMQ_PORT}
          CONSUME_RABBITMQ_USER=${CONSUME_RABBITMQ_USER}
          CONSUME_RABBITMQ_PASSWORD=${CONSUME_RABBITMQ_PASSWORD}
          KEEP_ALIVE_SERVER_HOST=${INGRESS_IP}
          KEEP_ALIVE_SERVER_PORT=${KEEP_ALIVE_SERVER_PORT}
          COORDINATOR_HOST=${INGRESS_IP}
          COORDINATOR_PORT=${COORDINATOR_PORT}
          EOF' && docker pull grupo4sdypp2024/tp-integrador-pool-manager:1.0.2 && git clone https://github.com/Guanart/SDyPP-2024-grupo-4.git && cd SDyPP-2024-grupo-4/TP-Integrador/docker-compose-worker-pool && docker compose up -d
          "

        # --project=integrador-sdypp \
        # --tags=docker,worker \
        # --boot-disk-size=20GB \
        # --machine-type=e2-small \

  delete-infra:
    if: contains(github.event.head_commit.message, 'delete')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1

      - name: Terraform Initialize
        run: |
          terraform init --reconfigure \
            -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
            -backend-config="prefix=terraform/state"
        working-directory: TP-Integrador/terraform

      - name: Terraform Destroy
        run: |
          terraform destroy -lock=false -auto-approve
        working-directory: TP-Integrador/terraform

  pause-infra:
    if: contains(github.event.head_commit.message, 'pause')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-d" --project ${{ secrets.PROJECT_ID }}

      - name: Scale Down Redis Deployment
        run: |
          kubectl scale deployment redis --replicas=0 -n services

      - name: Scale Down RabbitMQ Deployment
        run: |
          kubectl scale deployment rabbitmq --replicas=0 -n services
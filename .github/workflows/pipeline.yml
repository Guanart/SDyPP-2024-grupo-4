name: SDyPP-grupo4-tp-integrador

on:
  push:
    branches:
      - main
      
# permissions:
#   contents: write
#   actions: write

jobs:
  deploy-infra:
    if: "!contains(github.event.head_commit.message, 'delete') && !contains(github.event.head_commit.message, 'pause')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Check and Create GCS Bucket
        env:
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
        run: |
          gcloud config set project $PROJECT_ID
          # Check if the bucket exists
          BUCKET_URI="gs://${BUCKET_NAME}/"
          if gsutil ls -p $PROJECT_ID | grep -q $BUCKET_URI; then
            echo "Bucket $BUCKET_NAME already exists."
          else
            echo "Creating bucket $BUCKET_NAME..."
            gsutil mb -p $PROJECT_ID $BUCKET_URI
          fi

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1

      - name: Terraform Initialize
        run: |
          terraform init --reconfigure \
            -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
            -backend-config="prefix=terraform/state"
        working-directory: TP-Integrador/terraform

      - name: Terraform Plan
        run: |
          terraform plan -out=tfplan
        working-directory: TP-Integrador/terraform

      - name: Terraform Apply
        run: |
          terraform apply -lock=false -auto-approve tfplan
        working-directory: TP-Integrador/terraform


        
  install-argo:
    name: Install Argo CD tool
    if: "!contains(github.event.head_commit.message, 'delete') && !contains(github.event.head_commit.message, 'pause')"
    needs: deploy-infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: GCP authentication
        uses: google-github-actions/auth@v2
        with:
            credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: GCP kubectl plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
            version: '>= 363.0.0'
            install_components: 'kubectl'

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-b" --project ${{ secrets.PROJECT_ID }}

      - name: Check if Argo CD namespace exists
        id: check_namespace
        run: |
            if kubectl get namespace argocd; then
              echo "Namespace argocd already exists."
              echo "::set-output name=exists::true"
            else
              echo "Namespace argocd does not exist."
              echo "::set-output name=exists::false"
            fi

      - name: Create Argo CD namespace
        if: steps.check_namespace.outputs.exists == 'false'
        run: |
            kubectl create namespace argocd
            kubectl create namespace services
            kubectl create namespace apps

      - name: Install Argo CD
        if: steps.check_namespace.outputs.exists == 'false'
        run: |
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml



  pause-infra:
    if: contains(github.event.head_commit.message, 'pause')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-b" --project ${{ secrets.PROJECT_ID }}

      - name: Scale Down Redis Deployment
        run: |
          kubectl scale deployment redis --replicas=0 -n services

      - name: Scale Down RabbitMQ Deployment
        run: |
          kubectl scale deployment rabbitmq --replicas=0 -n services



  delete-infra:
    if: contains(github.event.head_commit.message, 'delete')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3.1.1

      - name: Terraform Initialize
        run: |
          terraform init --reconfigure \
            -backend-config="bucket=${{ secrets.BUCKET_NAME }}" \
            -backend-config="prefix=terraform/state"
        working-directory: TP-Integrador/terraform

      - name: Terraform Destroy
        run: |
          terraform destroy -lock=false -auto-approve
        working-directory: TP-Integrador/terraform



  deploy-services:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-b" --project ${{ secrets.PROJECT_ID }}

      - name: Create Kubernetes Services
        run: |
          kubectl apply -f TP-Integrador/Services/rabbitmq/rabbitmq-deployment.yaml
          kubectl apply -f TP-Integrador/Services/rabbitmq/rabbitmq-service.yaml
          kubectl apply -f TP-Integrador/Services/redis/redis-deployment.yaml
          kubectl apply -f TP-Integrador/Services/redis/redis-service.yaml



  deploy-apps:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push blocks coordinator service image
        uses: docker/build-push-action@v5
        with:
            context: ./TP-Integrador/Coordinator
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/tp-integrador-coordinator:1.0.0

      - name: Build and push pool manager service image
        uses: docker/build-push-action@v5
        with:
            context: ./TP-Integrador/KeepAliveServer
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/tp-integrador-pool-manager:1.0.0

      - name: Build and push worker image
        uses: docker/build-push-action@v5
        with:
            context: ./TP-Integrador/Worker/CPU
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/tp-integrador-cpu-worker:1.0.0

      - name: Setup Google Cloud
        uses: ./.github/actions/gcloud-credentials
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      - name: Get Kubernetes Credentials
        run: |
          gcloud container clusters get-credentials primary --zone "us-east1-b" --project ${{ secrets.PROJECT_ID }}

    #   - name: Create Kubernetes Apps
    #     run: |
    #       kubectl apply -f TP-Integrador/apps/particionador/particionador-deployment.yaml
    #       kubectl apply -f TP-Integrador/apps/particionador/particionador-service.yaml
    #       kubectl apply -f TP-Integrador/apps/unificador/unificador-deployment.yaml
    #       kubectl apply -f TP-Integrador/apps/unificador/unificador-service.yaml
    #       kubectl apply -f TP-Integrador/apps/web-server/web-server-deployment.yaml
    #       kubectl apply -f TP-Integrador/apps/web-server/web-server-service.yaml